version: 2.1
executors:
  lint:
    docker:
      - image: hadolint/hadolint:v1.16.0-debian

  go:
    docker:
      - image: golang:1.13.6-alpine3.10

  alpine:
    docker:
      - image: alpine:3.9

  terraform:
    docker:
      - image: hashicorp/terraform:0.12.13

### Aliases

terraform-defaults: &terraform-defaults
  name: "Install bash and aws-cli"
  command: apk update && apk add bash py-pip jq && pip install awscli

terraform-env-vars: &terraform-env-vars
  command: |
    export TF_VAR_aws_account_id=${AWS_ACCOUNT_ID}
    export TF_VAR_route53_hosted_zone=${ROUTE53_HOSTED_ZONE}
    export TF_VAR_mongodbatlas_private_key=${MONGO_ATLAS_PIR}
    export TF_VAR_mongodbatlas_public_key=${MONGO_ATLAS_PUB}
    export TF_VAR_docker_tag=${CIRCLE_SHA1}

### COMMANDS

commands:
  assume-aws-role:
    parameters:
      aws_access_key_id:
        description: AWS Access Key Id
        type: string
        default: "${AWS_ACCESS_KEY_ID}"
      aws_secret_key:
        description: AWS Secret Key
        type: string
        default: "${AWS_SECRET_ACCESS_KEY}"
      aws_assume_role_arn:
        description: AWS ARN For Assume Role
        type: string
        default: "${AWS_ASSUME_ROLE_ARN}"
    steps:
      - run: |
          export AWS_ACCESS_KEY_ID=<< parameters.aws_access_key_id >>
          export AWS_SECRET_ACCESS_KEY=<< parameters.aws_secret_key >>
          export temp_role=$(aws sts assume-role \
                  --role-arn "<< parameters.aws_assume_role_arn >>" \
                  --role-session-name "circle-ci-assume")
          export AWS_ACCESS_KEY_ID_TEMP=$(echo $temp_role | jq .Credentials.AccessKeyId | xargs)
          export AWS_SECRET_ACCESS_KEY_TEMP=$(echo $temp_role | jq .Credentials.SecretAccessKey | xargs)
          export AWS_SESSION_TOKEN_TEMP=$(echo $temp_role | jq .Credentials.SessionToken | xargs)
          echo "export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_TEMP" >> $BASH_ENV
          echo "export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_TEMP" >> $BASH_ENV
          echo "export AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN_TEMP" >> $BASH_ENV
          source $BASH_ENV

  push-setup:
    description: "Setup a machine to do Docker pushes"
    steps:
      - run: apk add --no-cache bash build-base docker py-pip jq ca-certificates
      - run: pip install awscli
      - setup_remote_docker:
          version: 18.06.0-ce
      - checkout
      - attach_workspace:
          at: ./
      - run: |
          mkdir ~/.docker
          echo '{"experimental": "enabled"}' > ~/.docker/config.json
          docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"

  test-setup:
    description: "Setup a machine to do container structure tests"
    steps:
      - run: |
          apk add curl make docker
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64 && \
          chmod +x container-structure-test-linux-amd64 && \
          mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test

  terraform-init:
    description: "Run Terraform init"
    steps:
      - run:
          <<: *terraform-env-vars
      - run: |
          source $BASH_ENV
          terraform init

  terraform-plan:
    description: "Run Terraform Plan"
    parameters:
      terraform_arg:
        description: provide terraform arguments
        type: string
        default: ""
    steps:
      - run:
          <<: *terraform-env-vars
      - run: |
          source $BASH_ENV
          terraform plan -out=tfplan -input=false << parameters.terraform_arg >>

  terraform-apply:
    description: "Run Terraform Apply"
    steps:
      - run:
          <<: *terraform-env-vars
      - run: |
          source $BASH_ENV
          terraform apply -lock=false -input=false tfplan

jobs:
  lint:
    executor: lint
    steps:
      - checkout
      - run: |
          hadolint Dockerfile

  test:
    executor: go
    steps:
      - checkout
      - run: |
          go test ./...

  build:
    executor: alpine
    steps:
      - checkout
      - setup_remote_docker
      - test-setup
      - run: |
          make build-docker
          make test-docker
          make save
      - persist_to_workspace:
          root: ./
          paths: ./

  push:
    docker:
      - image: alpine:3.9
    steps:
      - push-setup
      - assume-aws-role
      - run: |
          source $BASH_ENV
          aws ecr get-login --no-include-email --region eu-west-1 | /bin/bash
          make tag_docker
          make push

  deploy:
    docker:
      - image: terraform
    working_directory: ~/code/terraform/environment/prod
    steps:
      - checkout:
          path: ~/code
      - run:
          <<: *terraform-defaults
      - assume-aws-role
      - terraform-init
      - terraform-plan
      # - terraform-apply

workflows:
  version: 2
  build:
    jobs:
      - lint
      #     - test
      - build:
          requires:
            - lint
      #           - test
      - push:
          requires:
            - build
          filters:
            branches:
              only: master
      - deploy:
          requires:
            - push
          filters:
            branches:
              only: master
